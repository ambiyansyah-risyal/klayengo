name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  manual-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $CURRENT_TAG"
          echo "current_version=$CURRENT_TAG" >> "$GITHUB_OUTPUT"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_TAG="${{ steps.current_version.outputs.current_version }}"
          VERSION_TYPE="${{ inputs.version_type }}"
          VERSION_TYPE="${VERSION_TYPE:-patch}"
          CUSTOM_VERSION="${{ inputs.custom_version }}"

          if [ -n "$CUSTOM_VERSION" ]; then
            NEW_VERSION="$CUSTOM_VERSION"
            echo "Using custom version: $NEW_VERSION"
          else
            # Remove 'v' prefix for calculation
            VERSION_NUMBERS=$(echo "$CURRENT_TAG" | sed 's/^v//')
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBERS"

            case $VERSION_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            echo "Calculated version: $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update version.go
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          if [ -f "version.go" ]; then
            sed -i "s/Version = \".*\"/Version = \"$NEW_VERSION\"/" version.go
            echo "Updated version.go with $NEW_VERSION"
          fi

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          TODAY=$(date +"%Y-%m-%d")

          if [ -f "CHANGELOG.md" ]; then
            # Create changelog entry
            CHANGELOG_ENTRY="## [$NEW_VERSION] - $TODAY\n\n### Changes\n- Manual release $NEW_VERSION\n\n"

            # Insert at the top of CHANGELOG.md
            echo -e "$CHANGELOG_ENTRY\n$(cat CHANGELOG.md)" > CHANGELOG.md
            echo "Updated CHANGELOG.md with $NEW_VERSION"
          fi

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: release $NEW_VERSION"
            echo "Committed version bump to $NEW_VERSION"
          fi

      - name: Create release branch and push
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BRANCH_NAME="release/$NEW_VERSION"
          git checkout -B "$BRANCH_NAME"
          git push origin "$BRANCH_NAME" --force
          echo "Pushed branch $BRANCH_NAME"

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Create Pull Request
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BRANCH_NAME="release/$NEW_VERSION"
          gh pr create --title "Release $NEW_VERSION" --body "Automated release for version $NEW_VERSION" --base main --head "$BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BRANCH_NAME="release/$NEW_VERSION"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          echo "Created and pushed tag $NEW_VERSION"

      - name: Show result
        run: |
          echo "âœ… Manual release completed!"
          echo "ðŸ“¦ New version: ${{ steps.new_version.outputs.new_version }}"
          echo "ðŸ”– Tag created and pushed"
          echo "ðŸš€ Release workflow will be triggered automatically"
